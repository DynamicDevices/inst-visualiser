name: CI/CD - UWB Visualiser v4.0

on:
  push:
    branches: [ main, develop, cga-jen ]
  pull_request:
    branches: [ main, cga-jen ]
  schedule:
    # Run weekly dependency security check
    - cron: '0 0 * * 0'

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  # ===============================================
  # CODE QUALITY & VALIDATION
  # ===============================================
  
  validate:
    name: 🔍 Code Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Install Validation Dependencies
      run: |
        npm install --no-save stylelint eslint
        
    - name: 📦 Install ESLint Table Formatter
      run: npm install -D eslint-formatter-table
        
    - name: 🎨 CSS Linting
      run: |
        echo "🔍 Linting CSS files..."
        npx stylelint "css/**/*.css" --formatter verbose --max-warnings 999
        
    - name: ⚡ JavaScript Linting
      run: |
        echo "🔍 Linting JavaScript files..."
        npx eslint "js/**/*.js" --format table --quiet
        
    - name: 📊 Check File Sizes
      run: |
        echo "📊 Checking asset file sizes..."
        find . -name "*.css" -exec wc -c {} + | sort -n
        find . -name "*.js" -exec wc -c {} + | sort -n
        

        
  # ===============================================
  # BROWSER COMPATIBILITY TESTING
  # ===============================================
  
  browser-test:
    name: 🌐 Browser Compatibility Tests
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npx playwright install --with-deps ${{ matrix.browser }}
        
    - name: 🚀 Start Test Server
      run: |
        npm start &
        sleep 5
        curl -f http://localhost:8080 || exit 1
        
    - name: 🧪 Run Browser Tests
      run: |
        echo "🧪 Testing in ${{ matrix.browser }}..."
        npx playwright test --config=config/playwrite.config.js --browser=${{ matrix.browser }} tests/browser-tests.js
        
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-results-${{ matrix.browser }}
        path: test-results/
        
  # ===============================================
  # MQTT INTEGRATION TESTING
  # ===============================================
  
  mqtt-test:
    name: 📡 MQTT Integration Tests
    runs-on: ubuntu-latest
    needs: validate
    
    services:
      mosquitto:
        image: eclipse-mosquitto:latest
        ports:
          - 1883:1883
          - 9001:9001
        options: >-
          --health-cmd "mosquitto_pub -h localhost -t test -m 'health check'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Python Dependencies
      run: |
        pip install paho-mqtt numpy pytest
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Node Dependencies
      run: npm ci
      
    - name: 🚀 Start Application Server
      run: |
        npm start &
        sleep 5
        
    - name: 📡 Test MQTT Publisher
      run: |
        echo "📡 Testing MQTT data publisher..."
        cd examples
        timeout 30s python mqtt-live-publisher.py --test-mode --mqtt-broker localhost || true
        
    - name: 🧪 MQTT Integration Tests
      run: |
        echo "🧪 Running MQTT integration tests..."
        python -m pytest tests/mqtt-integration-test.py -v
        
  # ===============================================
  # PERFORMANCE TESTING
  # ===============================================
  
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: validate
    if: always()
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npm install -g lighthouse
        
    - name: 🚀 Start Server
      run: |
        npm start &
        sleep 5
        
    - name: 🔥 Lighthouse Performance Audit
      run: |
        echo "🔥 Running Lighthouse performance audit..."
        lighthouse http://localhost:8080 \
          --chrome-flags="--headless --no-sandbox" \
          --output=json \
          --output-path=./lighthouse-report.json \
          --preset=desktop
          
    - name: 📊 Performance Budget Check
      run: |
        echo "📊 Checking performance metrics..."
        node -e "
          try {
            const report = require('./lighthouse-report.json');
            
            // Handle different Lighthouse report formats
            let scores = {};
            if (report.lhr && report.lhr.categories) {
              scores = report.lhr.categories;
            } else if (report.categories) {
              scores = report.categories;
            } else {
              console.error('❌ Could not find categories in Lighthouse report');
              console.log('Report structure:', JSON.stringify(report, null, 2));
              process.exit(1);
            }
            
            console.log('Performance Scores:');
            if (scores.performance && scores.performance.score !== undefined) {
              console.log('Performance:', Math.round(scores.performance.score * 100));
            } else {
              console.log('Performance: N/A');
            }
            
            if (scores.accessibility && scores.accessibility.score !== undefined) {
              console.log('Accessibility:', Math.round(scores.accessibility.score * 100));
            } else {
              console.log('Accessibility: N/A');
            }
            
            if (scores['best-practices'] && scores['best-practices'].score !== undefined) {
              console.log('Best Practices:', Math.round(scores['best-practices'].score * 100));
            } else {
              console.log('Best Practices: N/A');
            }
            
            if (scores.seo && scores.seo.score !== undefined) {
              console.log('SEO:', Math.round(scores.seo.score * 100));
            } else {
              console.log('SEO: N/A');
            }
            
            // Only fail if performance score exists and is below threshold
            if (scores.performance && scores.performance.score !== undefined) {
              if (scores.performance.score < 0.85) {
                console.error('❌ Performance score below threshold!');
                process.exit(1);
              }
            }
            
            console.log('✅ Performance tests passed!');
          } catch (error) {
            console.error('❌ Error processing Lighthouse report:', error.message);
            console.log('Report structure:', JSON.stringify(require('./lighthouse-report.json'), null, 2));
            process.exit(1);
          }
        "
        
    - name: 📤 Upload Performance Report
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-report
        path: lighthouse-report.json
        
  # ===============================================
  # BUILD APPLICATION
  # ===============================================
  
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [validate, browser-test, mqtt-test]
    if: always()
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🗂️ Create Build Directory
      run: mkdir -p dist
      
    - name: 📋 Copy All Files
      run: |
        echo "📋 Copying all application files..."
        cp -r js/ dist/
        cp -r css/ dist/
        cp -r examples/ dist/
        cp -r docs/ dist/
        cp README.md LICENSE dist/
        cp index.html dist/
        [ -d resources/ ] && cp -r resources/ dist/ || echo "No resources directory"
        
    - name: 📊 Build Report
      run: |
        echo "📊 Build Summary:"
        echo "├── JavaScript files: $(find dist/js -name '*.js' | wc -l)"
        echo "├── CSS files: $(find dist/css -name '*.css' | wc -l)"
        echo "├── HTML file: $(wc -c < dist/index.html) bytes"
        echo "└── Total build size: $(du -sh dist | cut -f1)"
        
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 30
        
  # ===============================================
  # SECURITY SCANNING
  # ===============================================
  
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate
    if: always()
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔍 CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: 📊 CodeQL Analysis Results
      uses: github/codeql-action/analyze@v3
      
    - name: 🔒 Dependency Vulnerability Scan
      run: |
        echo "🔒 Running dependency vulnerability scan..."
        npm audit --audit-level moderate || echo "⚠️ Audit found vulnerabilities (continuing anyway for cga-jen branch)"
        
  # ===============================================
  # DEPLOYMENT TO GITHUB PAGES
  # ===============================================
  
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build, performance, security]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: 🔧 Setup GitHub Pages
      uses: actions/configure-pages@v4
      
    - name: 📦 Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      continue-on-error: true
      
    - name: 🎉 Deployment Success
      if: success()
      run: |
        echo "🎉 Successfully deployed ${{ github.ref_name }} branch to GitHub Pages!"
        echo "🌐 URL: ${{ steps.deployment.outputs.page_url }}"
        
    - name: ⚠️ Deployment Warning
      if: failure()
      run: |
        echo "⚠️ Deployment may have failed due to concurrent deployment in progress"
        echo "This is normal when multiple commits are pushed quickly"
        echo "The ${{ github.ref_name }} site should be available shortly at: https://dynamicdevices.github.io/inst-visualiser/"
        
  # ===============================================
  # NOTIFICATION & REPORTING
  # ===============================================
  
  notify:
    name: 📢 Build Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: 📊 Build Status Report
      run: |
        echo "📊 CI/CD Pipeline Summary:"
        echo "├── Validation: ${{ needs.validate.result }}"
        echo "├── Browser Tests: ${{ needs.browser-test.result }}"
        echo "├── MQTT Tests: ${{ needs.mqtt-test.result }}"
        echo "├── Performance: ${{ needs.performance.result }}"
        echo "├── Build: ${{ needs.build.result }}"
        echo "├── Security: ${{ needs.security.result }}"
        echo "└── Deploy: ${{ needs.deploy.result }}"
        
    - name: 📧 Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ UWB Visualiser v4.0 (${{ github.ref_name }} branch) successfully deployed!"
        echo "🌐 Live at: https://dynamicdevices.github.io/inst-visualiser/"
        
    - name: ❌ Failure Notification
      if: failure()
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo "Please check the logs above for details."