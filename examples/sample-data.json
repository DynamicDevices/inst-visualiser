{
  "description": "Sample UWB positioning data for testing the UWB Position Visualiser v3.0",
  "format": "Array of distance measurements: [[node1, node2, distance_in_meters], ...]",
  "scenarios": {
    "simple_triangle": {
      "description": "Three nodes forming a perfect triangle - good for testing geometry algorithms",
      "data": [
        ["A001", "A002", 3.0],
        ["A002", "A003", 4.0],
        ["A001", "A003", 5.0]
      ]
    },
    "square_room": {
      "description": "Four anchors in corners of a 4x3 meter room with one mobile tag",
      "data": [
        ["A001", "A002", 4.0],
        ["A002", "A003", 3.0],
        ["A003", "A004", 4.0],
        ["A004", "A001", 3.0],
        ["A001", "T001", 2.24],
        ["A002", "T001", 2.83],
        ["A003", "T001", 2.24],
        ["A004", "T001", 1.41]
      ]
    },
    "gateway_system": {
      "description": "Real-world scenario with B5A4 gateway and multiple rooms",
      "data": [
        ["B5A4", "R001", 2.5],
        ["B5A4", "R002", 4.2],
        ["B5A4", "R003", 3.8],
        ["R001", "R002", 3.1],
        ["R001", "R003", 2.9],
        ["R002", "R003", 5.7]
      ]
    },
    "office_layout": {
      "description": "Office building with multiple zones and a mobile device",
      "data": [
        ["B5A4", "O001", 5.2],
        ["B5A4", "O002", 8.1],
        ["B5A4", "O003", 12.3],
        ["O001", "O002", 6.8],
        ["O001", "O003", 15.2],
        ["O002", "O003", 9.4],
        ["M001", "B5A4", 3.8],
        ["M001", "O001", 2.1],
        ["M001", "O002", 7.9]
      ]
    },
    "large_warehouse": {
      "description": "Large space with long-range measurements",
      "data": [
        ["B5A4", "Z001", 15.6],
        ["B5A4", "Z002", 23.4],
        ["B5A4", "Z003", 31.2],
        ["Z001", "Z002", 18.8],
        ["Z001", "Z003", 28.1],
        ["Z002", "Z003", 12.7],
        ["F001", "B5A4", 8.9],
        ["F001", "Z001", 12.3],
        ["F002", "Z002", 5.4],
        ["F002", "Z003", 7.1]
      ]
    },
    "moving_targets": {
      "description": "Scenario with multiple mobile targets at different distances",
      "data": [
        ["B5A4", "A001", 10.0],
        ["B5A4", "A002", 8.5],
        ["A001", "A002", 6.3],
        ["M001", "B5A4", 4.2],
        ["M001", "A001", 7.8],
        ["M001", "A002", 3.9],
        ["M002", "B5A4", 6.1],
        ["M002", "A001", 5.5],
        ["M002", "A002", 8.2],
        ["M003", "B5A4", 2.8],
        ["M003", "A001", 12.1],
        ["M003", "A002", 9.7]
      ]
    },
    "accuracy_test": {
      "description": "Data with varying accuracy levels to test accuracy indicators",
      "data": [
        ["A001", "A002", 1.2],
        ["A001", "A003", 0.8],
        ["A002", "A003", 2.1],
        ["A001", "A004", 12.5],
        ["A002", "A004", 15.8],
        ["A003", "A004", 18.2],
        ["A001", "A005", 0.3],
        ["A002", "A005", 0.4],
        ["F001", "F002", 45.7],
        ["C001", "C002", 0.15]
      ]
    },
    "minimal_two_nodes": {
      "description": "Simplest case with just two nodes",
      "data": [
        ["N001", "N002", 2.5]
      ]
    },
    "stress_test": {
      "description": "Many nodes to test performance and layout algorithms",
      "data": [
        ["B5A4", "N001", 2.1], ["B5A4", "N002", 3.2], ["B5A4", "N003", 4.1],
        ["B5A4", "N004", 5.3], ["B5A4", "N005", 2.8], ["B5A4", "N006", 3.9],
        ["N001", "N002", 1.8], ["N001", "N003", 2.9], ["N001", "N004", 4.2],
        ["N002", "N003", 1.5], ["N002", "N005", 3.1], ["N002", "N006", 4.8],
        ["N003", "N004", 2.2], ["N003", "N005", 2.7], ["N003", "N006", 3.4],
        ["N004", "N005", 3.8], ["N004", "N006", 2.6], ["N005", "N006", 1.9],
        ["M001", "B5A4", 1.9], ["M001", "N001", 0.8], ["M001", "N002", 2.3],
        ["M002", "B5A4", 4.1], ["M002", "N003", 1.2], ["M002", "N004", 2.8],
        ["M003", "N005", 1.6], ["M003", "N006", 2.1], ["M003", "M001", 3.5]
      ]
    }
  },
  "usage_examples": {
    "javascript": {
      "description": "How to use this data in JavaScript",
      "code": "// Load and use sample data\nfetch('sample-data.json')\n  .then(response => response.json())\n  .then(data => {\n    const triangleData = data.scenarios.simple_triangle.data;\n    // Process triangle data: [[\"A001\", \"A002\", 3.0], [\"A002\", \"A003\", 4.0], [\"A001\", \"A003\", 5.0]]\n  });"
    },
    "python": {
      "description": "How to use this data in Python",
      "code": "import json\n\n# Load sample data\nwith open('sample-data.json', 'r') as f:\n    data = json.load(f)\n    \n# Get office layout scenario\noffice_data = data['scenarios']['office_layout']['data']\n\n# Publish via MQTT\nimport paho.mqtt.client as mqtt\nclient = mqtt.Client()\nclient.connect('mqtt.example.com', 1883)\nclient.publish('uwb/positions', json.dumps(office_data))"
    },
    "curl": {
      "description": "Test with HTTP API (if supported by broker)",
      "code": "# Example using mosquitto_pub\nmosquitto_pub -h mqtt.example.com -t uwb/positions -m '[[\"A001\",\"A002\",3.0],[\"A002\",\"A003\",4.0],[\"A001\",\"A003\",5.0]]'"
    }
  },
  "testing_scenarios": {
    "physics_validation": {
      "description": "Use simple_triangle to verify triangle geometry calculations",
      "expected_result": "Should form perfect triangle with spring-mass physics converging quickly"
    },
    "performance_test": {
      "description": "Use stress_test to verify performance with many nodes",
      "expected_result": "Should handle 10+ nodes smoothly with ultra-fast physics"
    },
    "accuracy_indicators": {
      "description": "Use accuracy_test to verify distance accuracy classification",
      "expected_result": "Should show ✓ for normal distances, ⚠ for long/short distances"
    },
    "gateway_detection": {
      "description": "Use gateway_system to verify B5A4 gateway styling",
      "expected_result": "B5A4 node should appear red with 'GW' label"
    },
    "real_world_simulation": {
      "description": "Use office_layout or warehouse scenarios for realistic demos",
      "expected_result": "Should show believable office/warehouse positioning"
    }
  },
  "data_quality_notes": {
    "distance_ranges": {
      "accurate": "0.5m to 8.0m - shown with ✓",
      "approximate": ">8.0m or <0.5m - shown with ⚠",
      "invalid": "≤0 or non-numeric - shown with ❌"
    },
    "node_naming_convention": {
      "format": "4-digit alphanumeric codes (e.g., A001, B5A4, M003)",
      "prefixes": {
        "A###": "Anchor nodes (A001, A002, A003, etc.)",
        "R###": "Room/location nodes (R001, R002, R003, etc.)",
        "O###": "Office zones (O001=Reception, O002=Conference, O003=Kitchen)",
        "Z###": "Warehouse zones (Z001, Z002, Z003, etc.)",
        "M###": "Mobile devices/tags (M001, M002, M003, etc.)",
        "T###": "Generic tags (T001, T002, etc.)",
        "F###": "Forklift/vehicle nodes (F001, F002, etc.)",
        "N###": "Generic nodes (N001, N002, etc.)",
        "C###": "Close-range test nodes (C001, C002, etc.)",
        "B5A4": "Special gateway node (automatically detected)"
      },
      "gateway": "B5A4 automatically detected as gateway (red styling)",
      "display": "4-character IDs display in full, longer IDs are truncated"
    },
    "measurement_noise": {
      "realistic": "Real UWB measurements typically have ±5-10cm noise",
      "simulation": "Python publisher adds Gaussian noise (σ=5cm)",
      "testing": "Sample data uses clean values for predictable testing"
    }
  }
}